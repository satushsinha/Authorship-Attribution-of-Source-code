# -*- coding: utf-8 -*-
"""tfidf+ml_models1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jcHSf_7uPF1h9rY1yEjbxzz48gasPKeO
"""

import os
import math
from termcolor import colored
import numpy as np
import matplotlib
matplotlib.use('Agg')
import pandas as pd
#from data_helpers import load_data
from keras import callbacks
from sklearn.preprocessing import LabelBinarizer
from sklearn.preprocessing import LabelEncoder
#from keras.utils.vis_utils import plot_model
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.callbacks import TensorBoard
from matplotlib import pyplot as plt
from keras import backend as K
from keras.optimizers import Adam

from keras.layers import Embedding
import string
import numpy as np
import pandas as pd
from keras.models import Model
from keras.optimizers import SGD
from keras.layers import Input, Dense, Dropout, Flatten
from keras.layers import concatenate
from keras.layers import Dropout
import random

import regex
from keras.layers.convolutional import Convolution1D, MaxPooling1D, AveragePooling1D

import pandas as pd

dataset=pd.read_csv('Train.csv')
k=0
X_train=[]
y_train=[]
for i in range(0,1000):
  for j in range(k,k+40):
    X_train.append(dataset.iloc[j,0])
    y_train.append(dataset.iloc[j,1])
  k+=50

k=40
X_test=[]
y_test=[]
for i in range(0,1000):
  for j in range(k,k+10):
    X_test.append(dataset.iloc[j,0])
    y_test.append(dataset.iloc[j,1])
  k+=50

X_train=pd.DataFrame(X_train)
X_test=pd.DataFrame(X_test)
y_train=pd.DataFrame(y_train)
y_test=pd.DataFrame(y_test)
X_train=X_train.iloc[:,:].values
X_test=X_test.iloc[:,:].values
y_train=y_train.iloc[:,:].values
y_test=y_test.iloc[:,:].values

train=np.concatenate((X_train,y_train),axis=1)
test=np.concatenate((X_test,y_test),axis=1)

np.random.shuffle(train)
np.random.shuffle(test)

train=pd.DataFrame(train)
test=pd.DataFrame(test)

X_train=train.iloc[:,0]
X_test=test.iloc[:,0]
y_train=train.iloc[:,1]
y_test=test.iloc[:,1]

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier

from sklearn.preprocessing import LabelEncoder
from keras.utils import np_utils
encoder = LabelEncoder()
encoder.fit(y_train)
y_train = encoder.transform(y_train)
y_test =encoder.transform(y_test)

tfidf_vectorizer=TfidfVectorizer(stop_words='english', max_df=0.7)
tfidf_train=tfidf_vectorizer.fit_transform(X_train) 
tfidf_test=tfidf_vectorizer.transform(X_test)
'''
pac=PassiveAggressiveClassifier(max_iter=50)
pac.fit(tfidf_train,y_train)
y_pred=pac.predict(tfidf_test)
'''
from catboost import CatBoostClassifier
model = CatBoostClassifier(iterations=2,
                          learning_rate=0.1)
model.fit(tfidf_train,y_train)
y_pred=model.predict(tfidf_test)
'''

from sklearn.naive_bayes import MultinomialNB
clf = MultinomialNB()
clf.fit(tfidf_train,y_train)
y_pred=clf.predict(tfidf_test)

''''''
from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(random_state=0)
clf.fit(tfidf_train,y_train)
y_pred=clf.predict(tfidf_test)
'''
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_pred)


from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
print('Confusion Matrix :')
print(cm)
print('Accuracy Score :',accuracy_score(y_test,y_pred))
print('Report : ')
print(classification_report(y_test, y_pred))
