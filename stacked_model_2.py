# -*- coding: utf-8 -*-
"""stacked_model_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qcidGB-2szEid1IzC725QpazmDrLhpqS
"""

import os
import math
from termcolor import colored
import numpy as np
import matplotlib
matplotlib.use('Agg')
import pandas as pd
#from data_helpers import load_data
from keras import callbacks
from sklearn.preprocessing import LabelBinarizer
from sklearn.preprocessing import LabelEncoder
#from keras.utils.vis_utils import plot_model
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.callbacks import TensorBoard
from matplotlib import pyplot as plt
from keras import backend as K
from keras.optimizers import Adam

from keras.layers import Embedding
import string
import numpy as np
import pandas as pd
from keras.models import Model
from keras.optimizers import SGD
from keras.layers import Input, Dense, Dropout, Flatten
from keras.layers import concatenate
from keras.layers import Dropout
import random

import regex
from keras.layers.convolutional import Convolution1D, MaxPooling1D, AveragePooling1D
from mlxtend.classifier import StackingCVClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.decomposition import PCA
from sklearn import ensemble,model_selection,svm
from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier

import pandas as pd

dataset_train=pd.read_csv('Final_AST_train.csv')
dataset_test=pd.read_csv('Final_AST_dev.csv')
dataset_result=pd.read_csv('Final_AST_test.csv')

X_train=dataset_train.iloc[:,1].values
y_train=dataset_train.iloc[:,2:3].values
X_test=dataset_test.iloc[:,1].values
y_test=dataset_test.iloc[:,2:3].values
X_result=dataset_result.iloc[:,1].values
process=dataset_result.iloc[:,0:1].values


from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier

import numpy as np

tfidf_vectorizer=TfidfVectorizer(max_df=0.6, ngram_range=(1,2),min_df=0.0)
X=tfidf_vectorizer.fit(X_train)
tfidf_train=tfidf_vectorizer.transform(X_train)
tfidf_test=tfidf_vectorizer.transform(X_test)
tfidf_result=tfidf_vectorizer.transform(X_result)

c1 = ensemble.ExtraTreesClassifier(n_estimators=150,bootstrap=True)
c2= ensemble.RandomForestClassifier(n_estimators=150,bootstrap=True)
c3=XGBClassifier();
meta = svm.LinearSVC()
etc = StackingCVClassifier(classifiers=[c1,c2,c3],use_probas=True,meta_classifier=meta)

etc.fit(tfidf_train,y_train)

y_pred=etc.predict(tfidf_test)
'''
from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(random_state=0)
clf.fit(tfidf_train,y_train)
y_pred=clf.predict(tfidf_test)
'''
'''
from sklearn import svm
clf=svm.SVC()
clf.fit(tfidf_train,y_train)
y_pred=clf.predict(tfidf_test)
'''
'''
from sklearn.linear_model import LogisticRegression
clf=LogisticClassifier(random_state=0)
clf.fit(tfidf_train,y_train)
y_pred=clf.predict(tfidf_test)
'''

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_pred)


from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
print('Confusion Matrix :')
print(cm)
print('Accuracy Score :',accuracy_score(y_test,y_pred))
print('Report : ')
print(classification_report(y_test, y_pred))

y_result=etc.predict(tfidf_result)
y_result=pd.DataFrame(y_result)
y_result=y_result.iloc[:,:].values
submission=np.concatenate((process,y_result),axis=1)

submission=pd.DataFrame(submission)
submission.to_csv('Final_Submission-2.csv',header=True, index=False)
